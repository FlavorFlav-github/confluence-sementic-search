name: PR Docker Build, Health & CodeQL Validation

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  validate:
    name: üß™ Validate Docker Build and Health
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Build Docker image (CI mode, with cache)
        run: |
          docker buildx build \
            --build-arg CI_MODE=true \
            --tag rag-app-test \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            .

      - name: Update cache
        run: |
          rm -rf /tmp/.buildx-cache || true
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Patch docker-compose to use prebuilt image
        run: |
          yq e -i '
            .services["rag-app"].image = "rag-app-test" |
            del(.services["rag-app"].build)
          ' docker-compose.yml

      - name: Disable GPU deploy for CI
        run: |
          sed -i '/capabilities: \[ gpu, compute, utility \]/d' docker-compose.yml
          sed -i '/driver: nvidia/d' docker-compose.yml
          sed -i '/deploy:/,/capabilities:/d' docker-compose.yml

      - name: Start services
        run: docker compose up
        env:
          RAG_API_PORT: 8000
          QDRANT_PORT: 6333
          REDIS_PORT: 6379

      - name: Wait for API health check
        run: |
          echo "‚è≥ Waiting for /health endpoint..."
          for i in {1..30}; do
            STATUS=$(curl -s http://localhost:8000/health | jq -r '.status' || true)
            if [[ "$STATUS" == "healthy" || "$STATUS" == "degraded" ]]; then
              echo "‚úÖ Health check passed with status: $STATUS"
              exit 0
            fi
            echo "Waiting... ($i/30)"
            sleep 5
          done
          echo "‚ùå Health check failed after 150s"
          docker compose logs
          exit 1

      - name: Verify Redis connectivity
        run: |
          docker exec rag-cache redis-cli ping | grep -q PONG || (echo "‚ùå Redis not responding" && docker compose logs && exit 1)

      - name: Verify Qdrant readiness
        run: |
          curl -fs http://localhost:6333/readyz || (echo "‚ùå Qdrant not ready" && docker compose logs && exit 1)

      - name: Clean up
        if: always()
        run: docker compose down -v

  codeql:
    name: üîç CodeQL Security Analysis
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [python]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
