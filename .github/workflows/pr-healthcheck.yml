# .github/workflows/pr-healthcheck.yml
name: PR Docker Build & Health Validation

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Validate Docker Build and Health
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image with cache
        run: |
          docker build \
            --tag rag-app-test \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            .

      - name: Update cache
        run: |
          rm -rf /tmp/.buildx-cache || true
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Patch docker compose to use prebuilt image
        run: |
          sed -i 's|build: \.|# build disabled for CI|g' docker-compose.yml
          sed -i 's|image: flavorflav/rag-app:latest|image: rag-app-test|g' docker-compose.yml

      - name: Disable GPU deploy for CI
        run: |
          sed -i '/capabilities: \[ gpu, compute, utility \]/d' docker-compose.yml
          sed -i '/driver: nvidia/d' docker-compose.yml
          sed -i '/deploy:/,/capabilities:/d' docker-compose.yml

      - name: Start services
        run: docker compose up -d
        env:
          RAG_API_PORT: 8000
          QDRANT_PORT: 6333
          REDIS_PORT: 6379

      - name: Wait for API health check
        id: health
        run: |
          echo "‚è≥ Waiting for /health endpoint..."
          for i in {1..30}; do
            STATUS=$(curl -s http://localhost:8000/health | jq -r '.status' || true)
            if [[ "$STATUS" == "healthy" || "$STATUS" == "degraded" ]]; then
              echo "status=$STATUS" >> $GITHUB_OUTPUT
              echo "‚úÖ Health check passed with status: $STATUS"
              exit 0
            fi
            echo "Waiting... ($i/30)"
            sleep 5
          done
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "‚ùå Health check failed after 150s"
          docker compose logs
          exit 1

      - name: Verify Redis connectivity
        run: |
          docker exec rag-cache redis-cli ping | grep -q PONG || (echo "‚ùå Redis not responding" && docker compose logs && exit 1)

      - name: Verify Qdrant readiness
        run: |
          curl -fs http://localhost:6333/readyz || (echo "‚ùå Qdrant not ready" && docker compose logs && exit 1)

      - name: Clean up
        if: always()
        run: docker compose down -v

      - name: Post PR status comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### ü©∫ PR Health Check Result
            **Status:** ${{ steps.health.outputs.status }}
            - Docker build: ‚úÖ
            - Services up: ‚úÖ
            - Redis: ‚úÖ
            - Qdrant: ‚úÖ
            
            *(This comment is automatically generated by GitHub Actions)*
